{
  "EDITOR_STATE": {
    "allProjectFiles": {
      "cc7d3058-9bfd-4d1f-b188-9061e08fd656": {
        "id": "cc7d3058-9bfd-4d1f-b188-9061e08fd656",
        "parent": null,
        "name": "graphql-api",
        "type": "DIRECTORY",
        "isDirectory": true,
        "children": [
          "c685cb15-6d7d-44c8-82ab-8544bfcaef59"
        ],
        "isRemovable": false,
        "filePath": "graphql-api"
      },
      "c685cb15-6d7d-44c8-82ab-8544bfcaef59": {
        "id": "c685cb15-6d7d-44c8-82ab-8544bfcaef59",
        "parent": "cc7d3058-9bfd-4d1f-b188-9061e08fd656",
        "name": "handler.js",
        "type": "JS_LAMBDA",
        "isDirectory": false,
        "children": [],
        "isRemovable": true,
        "filePath": "graphql-api/handler.js",
        "code": "const {\n  graphql,\n  GraphQLSchema,\n  GraphQLObjectType,\n  GraphQLString,\n  GraphQLNonNull,\n} = require('graphql');\n\nconst AWS = require('aws-sdk');\n\nconst dynamoDb = new AWS.DynamoDB.DocumentClient();\n\nconst promisify = foo => new Promise((resolve, reject) => {\n  foo((error, result) => {\n    if (error) {\n      reject(error);\n    } else {\n      resolve(result);\n    }\n  });\n});\n\nconst getGreeting = firstName => promisify(callback =>\n  dynamoDb.get({\n    TableName: 'graphql-api-dev',\n    Key: {\n      'firstName': indunil\n    }\n  }, callback))\n  .then((result) => {\n    if (!result.Item) {\n      return firstName;\n    }\n    return result.Item.nickname;\n  })\n  .then(name => `Hello, ${name}.`);\n\nconst changeNickname = (firstName, nickname) => promisify(callback =>\n  dynamoDb.update({\n    TableName: 'graphql-api-dev',\n    Key: {\n      'firstName': indunil\n    },\n    ExpressionAttributeValues: {\n      ':nickname': sachithra\n    },\n    UpdateExpression: 'set '\n  }, callback))\n  .then(() => nickname);\n\nconst schema = new GraphQLSchema({\n  query: new GraphQLObjectType({\n    name: 'RootQueryType', // an arbitrary name\n    fields: {\n      // the query has a field called 'greeting'\n      greeting: {\n        // we need to know the user's name to greet them\n        args: { firstName: { name: 'firstName', type: new GraphQLNonNull(GraphQLString) } },\n        // the greeting message is a string\n        type: GraphQLString,\n        // resolve to a greeting message\n        resolve: (parent, args) => getGreeting(args.firstName),\n      },\n    },\n  }),\n  mutation: new GraphQLObjectType({\n    name: 'RootMutationType', // an arbitrary name\n    fields: {\n      changeNickname: {\n        args: {\n          firstName: { name: 'firstName', type: new GraphQLNonNull(GraphQLString) },\n          nickname: { name: 'nickname', type: new GraphQLNonNull(GraphQLString) },\n        },\n        type: GraphQLString,\n        resolve: (parent, args) => changeNickname(args.firstName, args.nickname),\n      },\n    },\n  }),\n});\n\n// We want to make a GET request with ?query=<graphql query>\n// The event properties are specific to AWS. Other providers will differ.\nmodule.exports.query = (event, context, callback) =>\n  graphql(schema, event.queryStringParameters.query)\n    .then(\n    result => callback(null, { statusCode: 200, body: JSON.stringify(result) }),\n    err => callback(err)\n    );\n",
        "config": {
          "runtime": "nodejs10.x",
          "handler": "query",
          "timeout": 60,
          "memory": 128,
          "layers": []
        },
        "triggers": [
          {
            "resourceName": "apigusEast1queryqueryget",
            "config": {}
          }
        ],
        "customSecurityPolicy": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:GetItem",
                "dynamodb:UpdateItem"
              ],
              "Resource": "arn:aws:dynamodb:us-east-1:*:table/graphql-api-dev"
            }
          ]
        },
        "testCases": {
          "6e6472e0-fea8-4930-9b94-6c85a46804dd": {
            "id": "6e6472e0-fea8-4930-9b94-6c85a46804dd",
            "name": "Test event",
            "functionId": "c685cb15-6d7d-44c8-82ab-8544bfcaef59",
            "event": "{\r\n    \"query\": \"value1\"\r\n   \r\n}",
            "eventTemplate": "hello-world"
          }
        }
      },
      "a8fbe21d-049f-4726-9268-6d3e392132d5": {
        "id": "a8fbe21d-049f-4726-9268-6d3e392132d5",
        "parent": null,
        "name": "serverless.yml",
        "type": "YAML_FILE",
        "isDirectory": false,
        "children": [],
        "isRemovable": true,
        "filePath": "serverless.yml",
        "code": "service: graphql-api\n\nprovider:\n  name: aws\n  runtime: nodejs10.x\n  environment:\n    DYNAMODB_TABLE: ${self:service}-${self:provider.stage}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:GetItem\n        - dynamodb:UpdateItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\n\nfunctions:\n  query:\n    handler: handler.query\n    events:\n      - http:\n          path: query\n          method: get\n\nresources:\n  Resources:\n    NicknamesTable:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: firstName\n            AttributeType: S\n        KeySchema:\n          - AttributeName: firstName\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}\n"
      },
      "88f8d877-8091-4d4c-a0fc-0a93f5fff74f": {
        "id": "88f8d877-8091-4d4c-a0fc-0a93f5fff74f",
        "parent": null,
        "name": "package.json",
        "type": "JSON_FILE",
        "isDirectory": false,
        "children": [],
        "isRemovable": true,
        "filePath": "package.json",
        "code": "{\n  \"name\": \"aws-node-graphql-api-with-dynamodb\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A single-module GraphQL endpoint with query and mutation functionality.\",\n  \"main\": \"handler.js\",\n  \"dependencies\": {\n    \"aws-sdk\": \"^2.136.0\",\n    \"eslint-plugin-react\": \"^7.4.0\",\n    \"graphql\": \"^0.11.7\"\n  },\n  \"devDependencies\": {},\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n"
      },
      "3f92d3c9-7b19-4713-b7f4-1575b677ae50": {
        "id": "3f92d3c9-7b19-4713-b7f4-1575b677ae50",
        "parent": null,
        "name": "package-lock.json",
        "type": "JSON_FILE",
        "isDirectory": false,
        "children": [],
        "isRemovable": true,
        "filePath": "package-lock.json",
        "code": "{\n  \"name\": \"aws-node-graphql-api-with-dynamodb\",\n  \"version\": \"1.0.0\",\n  \"lockfileVersion\": 1,\n  \"requires\": true,\n  \"dependencies\": {\n    \"array-includes\": {\n      \"version\": \"3.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/array-includes/-/array-includes-3.0.3.tgz\",\n      \"integrity\": \"sha1-GEtI9i2S10UrsxsyMWXH+L0CJm0=\",\n      \"requires\": {\n        \"define-properties\": \"^1.1.2\",\n        \"es-abstract\": \"^1.7.0\"\n      }\n    },\n    \"aws-sdk\": {\n      \"version\": \"2.430.0\",\n      \"resolved\": \"https://registry.npmjs.org/aws-sdk/-/aws-sdk-2.430.0.tgz\",\n      \"integrity\": \"sha512-xJC1Sd6pjiIUg0W6v189QFWaY/jo+dVdQEJpplzqqBWmdUhZrBVmuWBVjC/wf5r6+Tj2KCc0G1fvjZqVutYnMw==\",\n      \"requires\": {\n        \"buffer\": \"4.9.1\",\n        \"events\": \"1.1.1\",\n        \"ieee754\": \"1.1.8\",\n        \"jmespath\": \"0.15.0\",\n        \"querystring\": \"0.2.0\",\n        \"sax\": \"1.2.1\",\n        \"url\": \"0.10.3\",\n        \"uuid\": \"3.3.2\",\n        \"xml2js\": \"0.4.19\"\n      }\n    },\n    \"base64-js\": {\n      \"version\": \"1.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/base64-js/-/base64-js-1.3.0.tgz\",\n      \"integrity\": \"sha512-ccav/yGvoa80BQDljCxsmmQ3Xvx60/UpBIij5QN21W3wBi/hhIC9OoO+KLpu9IJTS9j4DRVJ3aDDF9cMSoa2lw==\"\n    },\n    \"buffer\": {\n      \"version\": \"4.9.1\",\n      \"resolved\": \"https://registry.npmjs.org/buffer/-/buffer-4.9.1.tgz\",\n      \"integrity\": \"sha1-bRu2AbB6TvztlwlBMgkwJ8lbwpg=\",\n      \"requires\": {\n        \"base64-js\": \"^1.0.2\",\n        \"ieee754\": \"^1.1.4\",\n        \"isarray\": \"^1.0.0\"\n      }\n    },\n    \"define-properties\": {\n      \"version\": \"1.1.3\",\n      \"resolved\": \"https://registry.npmjs.org/define-properties/-/define-properties-1.1.3.tgz\",\n      \"integrity\": \"sha512-3MqfYKj2lLzdMSf8ZIZE/V+Zuy+BgD6f164e8K2w7dgnpKArBDerGYpM46IYYcjnkdPNMjPk9A6VFB8+3SKlXQ==\",\n      \"requires\": {\n        \"object-keys\": \"^1.0.12\"\n      }\n    },\n    \"doctrine\": {\n      \"version\": \"2.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/doctrine/-/doctrine-2.1.0.tgz\",\n      \"integrity\": \"sha512-35mSku4ZXK0vfCuHEDAwt55dg2jNajHZ1odvF+8SSr82EsZY4QmXfuWso8oEd8zRhVObSN18aM0CjSdoBX7zIw==\",\n      \"requires\": {\n        \"esutils\": \"^2.0.2\"\n      }\n    },\n    \"es-abstract\": {\n      \"version\": \"1.13.0\",\n      \"resolved\": \"https://registry.npmjs.org/es-abstract/-/es-abstract-1.13.0.tgz\",\n      \"integrity\": \"sha512-vDZfg/ykNxQVwup/8E1BZhVzFfBxs9NqMzGcvIJrqg5k2/5Za2bWo40dK2J1pgLngZ7c+Shh8lwYtLGyrwPutg==\",\n      \"requires\": {\n        \"es-to-primitive\": \"^1.2.0\",\n        \"function-bind\": \"^1.1.1\",\n        \"has\": \"^1.0.3\",\n        \"is-callable\": \"^1.1.4\",\n        \"is-regex\": \"^1.0.4\",\n        \"object-keys\": \"^1.0.12\"\n      }\n    },\n    \"es-to-primitive\": {\n      \"version\": \"1.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/es-to-primitive/-/es-to-primitive-1.2.0.tgz\",\n      \"integrity\": \"sha512-qZryBOJjV//LaxLTV6UC//WewneB3LcXOL9NP++ozKVXsIIIpm/2c13UDiD9Jp2eThsecw9m3jPqDwTyobcdbg==\",\n      \"requires\": {\n        \"is-callable\": \"^1.1.4\",\n        \"is-date-object\": \"^1.0.1\",\n        \"is-symbol\": \"^1.0.2\"\n      }\n    },\n    \"eslint-plugin-react\": {\n      \"version\": \"7.12.4\",\n      \"resolved\": \"https://registry.npmjs.org/eslint-plugin-react/-/eslint-plugin-react-7.12.4.tgz\",\n      \"integrity\": \"sha512-1puHJkXJY+oS1t467MjbqjvX53uQ05HXwjqDgdbGBqf5j9eeydI54G3KwiJmWciQ0HTBacIKw2jgwSBSH3yfgQ==\",\n      \"requires\": {\n        \"array-includes\": \"^3.0.3\",\n        \"doctrine\": \"^2.1.0\",\n        \"has\": \"^1.0.3\",\n        \"jsx-ast-utils\": \"^2.0.1\",\n        \"object.fromentries\": \"^2.0.0\",\n        \"prop-types\": \"^15.6.2\",\n        \"resolve\": \"^1.9.0\"\n      }\n    },\n    \"esutils\": {\n      \"version\": \"2.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/esutils/-/esutils-2.0.2.tgz\",\n      \"integrity\": \"sha1-Cr9PHKpbyx96nYrMbepPqqBLrJs=\"\n    },\n    \"events\": {\n      \"version\": \"1.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/events/-/events-1.1.1.tgz\",\n      \"integrity\": \"sha1-nr23Y1rQmccNzEwqH1AEKI6L2SQ=\"\n    },\n    \"function-bind\": {\n      \"version\": \"1.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/function-bind/-/function-bind-1.1.1.tgz\",\n      \"integrity\": \"sha512-yIovAzMX49sF8Yl58fSCWJ5svSLuaibPxXQJFLmBObTuCr0Mf1KiPopGM9NiFjiYBCbfaa2Fh6breQ6ANVTI0A==\"\n    },\n    \"graphql\": {\n      \"version\": \"0.11.7\",\n      \"resolved\": \"https://registry.npmjs.org/graphql/-/graphql-0.11.7.tgz\",\n      \"integrity\": \"sha512-x7uDjyz8Jx+QPbpCFCMQ8lltnQa4p4vSYHx6ADe8rVYRTdsyhCJbvSty5DAsLVmU6cGakl+r8HQYolKHxk/tiw==\",\n      \"requires\": {\n        \"iterall\": \"1.1.3\"\n      }\n    },\n    \"has\": {\n      \"version\": \"1.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/has/-/has-1.0.3.tgz\",\n      \"integrity\": \"sha512-f2dvO0VU6Oej7RkWJGrehjbzMAjFp5/VKPp5tTpWIV4JHHZK1/BxbFRtf/siA2SWTe09caDmVtYYzWEIbBS4zw==\",\n      \"requires\": {\n        \"function-bind\": \"^1.1.1\"\n      }\n    },\n    \"has-symbols\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/has-symbols/-/has-symbols-1.0.0.tgz\",\n      \"integrity\": \"sha1-uhqPGvKg/DllD1yFA2dwQSIGO0Q=\"\n    },\n    \"ieee754\": {\n      \"version\": \"1.1.8\",\n      \"resolved\": \"https://registry.npmjs.org/ieee754/-/ieee754-1.1.8.tgz\",\n      \"integrity\": \"sha1-vjPUCsEO8ZJnAfbwii2G+/0a0+Q=\"\n    },\n    \"is-callable\": {\n      \"version\": \"1.1.4\",\n      \"resolved\": \"https://registry.npmjs.org/is-callable/-/is-callable-1.1.4.tgz\",\n      \"integrity\": \"sha512-r5p9sxJjYnArLjObpjA4xu5EKI3CuKHkJXMhT7kwbpUyIFD1n5PMAsoPvWnvtZiNz7LjkYDRZhd7FlI0eMijEA==\"\n    },\n    \"is-date-object\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/is-date-object/-/is-date-object-1.0.1.tgz\",\n      \"integrity\": \"sha1-mqIOtq7rv/d/vTPnTKAbM1gdOhY=\"\n    },\n    \"is-regex\": {\n      \"version\": \"1.0.4\",\n      \"resolved\": \"https://registry.npmjs.org/is-regex/-/is-regex-1.0.4.tgz\",\n      \"integrity\": \"sha1-VRdIm1RwkbCTDglWVM7SXul+lJE=\",\n      \"requires\": {\n        \"has\": \"^1.0.1\"\n      }\n    },\n    \"is-symbol\": {\n      \"version\": \"1.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/is-symbol/-/is-symbol-1.0.2.tgz\",\n      \"integrity\": \"sha512-HS8bZ9ox60yCJLH9snBpIwv9pYUAkcuLhSA1oero1UB5y9aiQpRA8y2ex945AOtCZL1lJDeIk3G5LthswI46Lw==\",\n      \"requires\": {\n        \"has-symbols\": \"^1.0.0\"\n      }\n    },\n    \"isarray\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz\",\n      \"integrity\": \"sha1-u5NdSFgsuhaMBoNJV6VKPgcSTxE=\"\n    },\n    \"iterall\": {\n      \"version\": \"1.1.3\",\n      \"resolved\": \"https://registry.npmjs.org/iterall/-/iterall-1.1.3.tgz\",\n      \"integrity\": \"sha512-Cu/kb+4HiNSejAPhSaN1VukdNTTi/r4/e+yykqjlG/IW+1gZH5b4+Bq3whDX4tvbYugta3r8KTMUiqT3fIGxuQ==\"\n    },\n    \"jmespath\": {\n      \"version\": \"0.15.0\",\n      \"resolved\": \"https://registry.npmjs.org/jmespath/-/jmespath-0.15.0.tgz\",\n      \"integrity\": \"sha1-o/Iiqarp+Wb10nx5ZRDigJF2Qhc=\"\n    },\n    \"js-tokens\": {\n      \"version\": \"4.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz\",\n      \"integrity\": \"sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==\"\n    },\n    \"jsx-ast-utils\": {\n      \"version\": \"2.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/jsx-ast-utils/-/jsx-ast-utils-2.0.1.tgz\",\n      \"integrity\": \"sha1-6AGxs5mF4g//yHtA43SAgOLcrH8=\",\n      \"requires\": {\n        \"array-includes\": \"^3.0.3\"\n      }\n    },\n    \"loose-envify\": {\n      \"version\": \"1.4.0\",\n      \"resolved\": \"https://registry.npmjs.org/loose-envify/-/loose-envify-1.4.0.tgz\",\n      \"integrity\": \"sha512-lyuxPGr/Wfhrlem2CL/UcnUc1zcqKAImBDzukY7Y5F/yQiNdko6+fRLevlw1HgMySw7f611UIY408EtxRSoK3Q==\",\n      \"requires\": {\n        \"js-tokens\": \"^3.0.0 || ^4.0.0\"\n      }\n    },\n    \"object-assign\": {\n      \"version\": \"4.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz\",\n      \"integrity\": \"sha1-IQmtx5ZYh8/AXLvUQsrIv7s2CGM=\"\n    },\n    \"object-keys\": {\n      \"version\": \"1.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/object-keys/-/object-keys-1.1.0.tgz\",\n      \"integrity\": \"sha512-6OO5X1+2tYkNyNEx6TsCxEqFfRWaqx6EtMiSbGrw8Ob8v9Ne+Hl8rBAgLBZn5wjEz3s/s6U1WXFUFOcxxAwUpg==\"\n    },\n    \"object.fromentries\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/object.fromentries/-/object.fromentries-2.0.0.tgz\",\n      \"integrity\": \"sha512-9iLiI6H083uiqUuvzyY6qrlmc/Gz8hLQFOcb/Ri/0xXFkSNS3ctV+CbE6yM2+AnkYfOB3dGjdzC0wrMLIhQICA==\",\n      \"requires\": {\n        \"define-properties\": \"^1.1.2\",\n        \"es-abstract\": \"^1.11.0\",\n        \"function-bind\": \"^1.1.1\",\n        \"has\": \"^1.0.1\"\n      }\n    },\n    \"path-parse\": {\n      \"version\": \"1.0.6\",\n      \"resolved\": \"https://registry.npmjs.org/path-parse/-/path-parse-1.0.6.tgz\",\n      \"integrity\": \"sha512-GSmOT2EbHrINBf9SR7CDELwlJ8AENk3Qn7OikK4nFYAu3Ote2+JYNVvkpAEQm3/TLNEJFD/xZJjzyxg3KBWOzw==\"\n    },\n    \"prop-types\": {\n      \"version\": \"15.7.2\",\n      \"resolved\": \"https://registry.npmjs.org/prop-types/-/prop-types-15.7.2.tgz\",\n      \"integrity\": \"sha512-8QQikdH7//R2vurIJSutZ1smHYTcLpRWEOlHnzcWHmBYrOGUysKwSsrC89BCiFj3CbrfJ/nXFdJepOVrY1GCHQ==\",\n      \"requires\": {\n        \"loose-envify\": \"^1.4.0\",\n        \"object-assign\": \"^4.1.1\",\n        \"react-is\": \"^16.8.1\"\n      }\n    },\n    \"punycode\": {\n      \"version\": \"1.3.2\",\n      \"resolved\": \"https://registry.npmjs.org/punycode/-/punycode-1.3.2.tgz\",\n      \"integrity\": \"sha1-llOgNvt8HuQjQvIyXM7v6jkmxI0=\"\n    },\n    \"querystring\": {\n      \"version\": \"0.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/querystring/-/querystring-0.2.0.tgz\",\n      \"integrity\": \"sha1-sgmEkgO7Jd+CDadW50cAWHhSFiA=\"\n    },\n    \"react-is\": {\n      \"version\": \"16.8.6\",\n      \"resolved\": \"https://registry.npmjs.org/react-is/-/react-is-16.8.6.tgz\",\n      \"integrity\": \"sha512-aUk3bHfZ2bRSVFFbbeVS4i+lNPZr3/WM5jT2J5omUVV1zzcs1nAaf3l51ctA5FFvCRbhrH0bdAsRRQddFJZPtA==\"\n    },\n    \"resolve\": {\n      \"version\": \"1.10.0\",\n      \"resolved\": \"https://registry.npmjs.org/resolve/-/resolve-1.10.0.tgz\",\n      \"integrity\": \"sha512-3sUr9aq5OfSg2S9pNtPA9hL1FVEAjvfOC4leW0SNf/mpnaakz2a9femSd6LqAww2RaFctwyf1lCqnTHuF1rxDg==\",\n      \"requires\": {\n        \"path-parse\": \"^1.0.6\"\n      }\n    },\n    \"sax\": {\n      \"version\": \"1.2.1\",\n      \"resolved\": \"https://registry.npmjs.org/sax/-/sax-1.2.1.tgz\",\n      \"integrity\": \"sha1-e45lYZCyKOgaZq6nSEgNgozS03o=\"\n    },\n    \"url\": {\n      \"version\": \"0.10.3\",\n      \"resolved\": \"https://registry.npmjs.org/url/-/url-0.10.3.tgz\",\n      \"integrity\": \"sha1-Ah5NnHcF8hu/N9A861h2dAJ3TGQ=\",\n      \"requires\": {\n        \"punycode\": \"1.3.2\",\n        \"querystring\": \"0.2.0\"\n      }\n    },\n    \"uuid\": {\n      \"version\": \"3.3.2\",\n      \"resolved\": \"https://registry.npmjs.org/uuid/-/uuid-3.3.2.tgz\",\n      \"integrity\": \"sha512-yXJmeNaw3DnnKAOKJE51sL/ZaYfWJRl1pK9dr19YFCu0ObS231AB1/LbqTKRAQ5kw8A90rA6fr4riOUpTZvQZA==\"\n    },\n    \"xml2js\": {\n      \"version\": \"0.4.19\",\n      \"resolved\": \"https://registry.npmjs.org/xml2js/-/xml2js-0.4.19.tgz\",\n      \"integrity\": \"sha512-esZnJZJOiJR9wWKMyuvSE1y6Dq5LCuJanqhxslH2bxM6duahNZ+HMpCLhBQGZkbX6xRf8x1Y2eJlgt2q3qo49Q==\",\n      \"requires\": {\n        \"sax\": \">=0.6.0\",\n        \"xmlbuilder\": \"~9.0.1\"\n      }\n    },\n    \"xmlbuilder\": {\n      \"version\": \"9.0.7\",\n      \"resolved\": \"https://registry.npmjs.org/xmlbuilder/-/xmlbuilder-9.0.7.tgz\",\n      \"integrity\": \"sha1-Ey7mPS7FVlxVfiD0wi35rKaGsQ0=\"\n    }\n  }\n}\n"
      },
      "733ad841-a2a8-4d70-b7a2-05070f63d8df": {
        "id": "733ad841-a2a8-4d70-b7a2-05070f63d8df",
        "parent": null,
        "name": ".gitignore",
        "type": "TEXT_FILE",
        "isDirectory": false,
        "children": [],
        "isRemovable": true,
        "filePath": ".gitignore",
        "code": "# package directories\nnode_modules\njspm_packages\n\n# Serverless directories\n.serverless"
      },
      "81691b1c-e0fe-4295-8a97-2d7a9edadb28": {
        "id": "81691b1c-e0fe-4295-8a97-2d7a9edadb28",
        "parent": null,
        "name": "README.md",
        "type": "MARKDOWN_FILE",
        "isDirectory": false,
        "children": [],
        "isRemovable": true,
        "filePath": "README.md",
        "code": "<!--\ntitle: 'GraphQL query endpoint in NodeJS on AWS with DynamoDB'\ndescription: 'A single-module GraphQL endpoint with query and mutation functionality.'\nlayout: Doc\nframework: v1\nplatform: AWS\nlanguage: nodeJS\nauthorLink: 'https://github.com/gismoranas'\nauthorName: 'Gismo Ranas'\nauthorAvatar: 'https://avatars0.githubusercontent.com/u/5903107?v=4&s=140'\n-->\n\n# GraphQL query endpoint in NodeJS on AWS with DynamoDB\n\nGraphQL is cool, and the `graphql` module makes it easy to rapidly create a GraphQL service that validates queries. We use GraphQL at Serverless to query our backend services, and we love how well it fits into the serverless paradigm.\n\nLet's see how easy it is to use GraphQL with the Serverless Framework. In this example, I'll be targeting AWS. Let's build a simplistic version of an API that might be used by the front-end to retrieve a dynamic message to display in the UI, in this case greeting the user by name.\n\nStart by initializing a project and installing the [graphql](https://www.npmjs.com/package/graphql) module.\n```sh\n$ npm init\n$ npm install --save graphql\n```\n\nNow we can use it in `handler.js`, where we declare a schema and then use it to serve query requests.\n```js\n/* handler.js */\nconst {\n  graphql,\n  GraphQLSchema,\n  GraphQLObjectType,\n  GraphQLString,\n  GraphQLNonNull\n} = require('graphql')\n\n// This method just inserts the user's first name into the greeting message.\nconst getGreeting = firstName => `Hello, ${firstName}.`\n\n// Here we declare the schema and resolvers for the query\nconst schema = new GraphQLSchema({\n  query: new GraphQLObjectType({\n    name: 'RootQueryType', // an arbitrary name\n    fields: {\n      // the query has a field called 'greeting'\n      greeting: {\n        // we need to know the user's name to greet them\n        args: { firstName: { name: 'firstName', type: new GraphQLNonNull(GraphQLString) } },\n        // the greeting message is a string\n        type: GraphQLString,\n        // resolve to a greeting message\n        resolve: (parent, args) => getGreeting(args.firstName)\n      }\n    }\n  }),\n})\n\n// We want to make a GET request with ?query=<graphql query>\n// The event properties are specific to AWS. Other providers will differ.\nmodule.exports.query = (event, context, callback) => graphql(schema, event.queryStringParameters.query)\n  .then(\n    result => callback(null, {statusCode: 200, body: JSON.stringify(result)}),\n    err => callback(err)\n  )\n```\n\nPretty simple! To deploy it, define a service in `serverless.yml`, and set the handler to service HTTP requests.\n```yml\n# serverless.yml\nservice: graphql-api\n\nfunctions:\n  query:\n    handler: handler.query\n    events:\n      - http:\n          path: query\n          method: get\n```\nNow we can bring it to life:\n```sh\n$ serverless deploy\n# Serverless: Packaging service...\n# Serverless: Excluding development dependencies...\n# Serverless: Uploading CloudFormation file to S3...\n# Serverless: Uploading artifacts...\n# Serverless: Uploading service .zip file to S3 (357.34 KB)...\n# Serverless: Validating template...\n# Serverless: Updating Stack...\n# Serverless: Checking Stack update progress...\n# ..............\n# Serverless: Stack update finished...\n# Service Information\n# service: graphql-api\n# stage: dev\n# region: us-east-1\n# stack: graphql-api-dev\n# api keys:\n#   None\n# endpoints:\n#   GET - https://9qdmq5nvql.execute-api.us-east-1.amazonaws.com/dev/query\n# functions:\n#   query: graphql-api-dev-query\n\n$ curl -G 'https://9qdmq5nvql.execute-api.us-east-1.amazonaws.com/dev/query' --data-urlencode 'query={greeting(firstName: \"Jeremy\")}'\n# {\"data\":{\"greeting\":\"Hello, Jeremy.\"}}\n```\n\nIn the real world, virtually any service that does something valuable has a data store behind it. For example, suppose users have nicknames that should appear in the greeting message. We need a database to store the nicknames, and we can expand our GraphQL API to update them.\n\nLet's start by adding a database to the resource definitions in `serverless.yml`. We need a table keyed on the user's first name, which we define using CloudFormation, as well as some provider configuration to allow our function to access it.\n```yml\n# add to serverless.yml\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  environment:\n    DYNAMODB_TABLE: ${self:service}-${self:provider.stage}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:GetItem\n        - dynamodb:UpdateItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\n\nresources:\n  Resources:\n    NicknamesTable:\n      Type: 'AWS::DynamoDB::Table'\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: firstName\n            AttributeType: S\n        KeySchema:\n          - AttributeName: firstName\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}\n```\n\nWe need to run `serverless deploy` again to update the changes made in `serverless.yml`:\n\n```\n$ serverless deploy\n```\n\nTo use it we need the [aws-sdk](https://www.npmjs.com/package/aws-sdk), In this example, I use the SDK's vanilla DocumentClient to access DynamoDB records.\n```sh\n$ npm install --save aws-sdk\n```\n\nInclude these in our handler, and then we can get to work.\n```js\n// add to handler.js\nconst AWS = require('aws-sdk');\nconst dynamoDb = new AWS.DynamoDB.DocumentClient();\n```\n\nBefore, we defined a method that just returned a string value for the greeting message. However, the GraphQL library can also use Promises as resolvers. Since the DocumentClient uses a callback pattern, we'll wrap these in promises and use the DynamoDB `get` method to check the database for a nickname for the user.\n\n```js\n// add to handler.js\nconst promisify = foo => new Promise((resolve, reject) => {\n  foo((error, result) => {\n    if(error) {\n      reject(error)\n    } else {\n      resolve(result)\n    }\n  })\n})\n\n// replace previous implementation of getGreeting\nconst getGreeting = firstName => promisify(callback =>\n  dynamoDb.get({\n    TableName: process.env.DYNAMODB_TABLE,\n    Key: { firstName },\n  }, callback))\n  .then(result => {\n    if(!result.Item) {\n      return firstName\n    }\n    return result.Item.nickname\n  })\n  .then(name => `Hello, ${name}.`)\n\n  // add method for updates\nconst changeNickname = (firstName, nickname) => promisify(callback =>\n  dynamoDb.update({\n    TableName: process.env.DYNAMODB_TABLE,\n    Key: { firstName },\n    UpdateExpression: 'SET nickname = :nickname',\n    ExpressionAttributeValues: {\n      ':nickname': nickname\n    }\n  }, callback))\n  .then(() => nickname)\n```\n\nYou can see here that we added a method `changeNickname`, but the GraphQL API is not yet using it. We need to declare a mutation that the front-end can use to perform updates. We previously only added a `query` declaration to the schema. Now we need a `mutation` as well.\n\n```js\n// alter schema\nconst schema = new GraphQLSchema({\n  query: new GraphQLObjectType({\n    /* unchanged */\n  }),\n  mutation: new GraphQLObjectType({\n    name: 'RootMutationType', // an arbitrary name\n    fields: {\n      changeNickname: {\n        args: {\n          // we need the user's first name as well as a preferred nickname\n          firstName: { name: 'firstName', type: new GraphQLNonNull(GraphQLString) },\n          nickname: { name: 'nickname', type: new GraphQLNonNull(GraphQLString) }\n        },\n        type: GraphQLString,\n        // update the nickname\n        resolve: (parent, args) => changeNickname(args.firstName, args.nickname)\n      }\n    }\n  })\n})\n```\n\nAfter these changes, we can make the greeting request again and receive the same result as before.\n```sh\n$ curl -G 'https://9qdmq5nvql.execute-api.us-east-1.amazonaws.com/dev/query' --data-urlencode 'query={greeting(firstName: \"Jeremy\")}'\n# {\"data\":{\"greeting\":\"Hello, Jeremy.\"}}\n```\nBut if I want the API to call me \"Jer\", I can update the nickname for \"Jeremy\".\n```sh\n$ curl -G 'https://9qdmq5nvql.execute-api.us-east-1.amazonaws.com/dev/query' --data-urlencode 'query=mutation {changeNickname(firstName:\n \"Jeremy\", nickname: \"Jer\")}'\n$ curl -G 'https://9qdmq5nvql.execute-api.us-east-1.amazonaws.com/dev/query' --data-urlencode 'query={greeting(firstName: \"Jeremy\")}'\n# {\"data\":{\"greeting\":\"Hello, Jer.\"}}\n```\n\nThe API will now call anyone named \"Jeremy\" by the nickname \"Jer\". This kind of separation of concerns lets you build front-ends and services that offload logic into back-ends that use abstract data access and processing behind one, strongly typed, validated, uniform contract that comes with rich versioning and deprecation strategies.\n\nTo deploy this service yourself, download the [source code](#todo) and deploy it with the Serverless Framework. Happy building!\n"
      }
    },
    "rootNode": "cc7d3058-9bfd-4d1f-b188-9061e08fd656",
    "openFiles": [
      "c685cb15-6d7d-44c8-82ab-8544bfcaef59"
    ],
    "currentFileId": "c685cb15-6d7d-44c8-82ab-8544bfcaef59",
    "resources": {
      "apigusEast1queryqueryget": {
        "name": "apigusEast1queryqueryget",
        "type": "API_GATEWAY",
        "config": {
          "selectedRegion": "us-east-1",
          "apiMode": 0,
          "apiName": "query",
          "endpointType": "EDGE",
          "resourceMode": 0,
          "resourceName": "query",
          "resourcePath": "/query",
          "restMethod": "GET",
          "proxyIntegration": true,
          "enableCORS": false,
          "stageMode": 0,
          "stageName": "dev",
          "mode": 0
        }
      },
      "ddbgraphqlApiDev": {
        "name": "ddbgraphqlApiDev",
        "type": "DynamoDB",
        "config": {
          "mode": 0,
          "operation": "update",
          "table": {
            "arn": "",
            "name": "graphql-api-dev",
            "partitionKey": "firstName",
            "partitionKeyType": "S",
            "hasSortKey": false,
            "sortKey": "",
            "sortKeyType": "S",
            "payPerRequest": true,
            "mode": 0
          },
          "isGlobalEditMode": false,
          "parameters": {
            "TableName": "graphql-api-dev",
            "Key": {
              "firstName": "@{indunil}"
            },
            "ExpressionAttributeValues": {
              ":nickname": "@{sachithra}"
            },
            "UpdateExpression": "set "
          },
          "triggerParams": {},
          "validator": {
            "validatableFields": {},
            "validity": true
          },
          "valid": true
        }
      }
    },
    "customTemplate": {
      "dialect": "CloudFormation",
      "definitions": {
        "Resources": {
          "NicknamesTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "AttributeDefinitions": [
                {
                  "AttributeName": "firstName",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "firstName",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              },
              "TableName": "graphql-api-dev"
            }
          }
        }
      }
    },
    "envVariables": [
      {
        "lambdaId": "all",
        "varKey": "DYNAMODB_TABLE",
        "varValue": "graphql-api-dev",
        "shouldPersist": true,
        "displayOnly": false,
        "editable": true
      },
      {
        "lambdaId": "all",
        "varKey": "SIGMA_AWS_ACC_ID",
        "varValue": null,
        "shouldPersist": false,
        "displayOnly": false,
        "editable": false
      }
    ],
    "packageJSON": {
      "dependencies": {
        "aws-sdk": {
          "name": "aws-sdk",
          "language": "javascript",
          "version": "^2.136.0"
        },
        "eslint-plugin-react": {
          "name": "eslint-plugin-react",
          "language": "javascript",
          "version": "^7.4.0"
        },
        "graphql": {
          "name": "graphql",
          "language": "javascript",
          "version": "^0.11.7"
        }
      }
    }
  },
  "PROJECT_META": {
    "projectName": "aws-node-graphql-api-with-dynamodb",
    "projectDescription": "A single-module GraphQL endpoint with query and mutation functionality.",
    "projectVersion": "1.0.0",
    "projectRegion": "us-east-1",
    "platform": "AWS",
    "platformRegions": {},
    "lastSave": 1576230177292
  },
  "VCS_STATE": {
    "provider": "GitHub",
    "repo": {
      "name": "examples",
      "url": "https://github.com/Indunil1992/examples"
    }
  }
}